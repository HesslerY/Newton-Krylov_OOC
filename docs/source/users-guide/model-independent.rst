=========================
Model Independent Details
=========================

Most options for the solver and the test_problem model are in a cfg file.
The default location of the cfg file is ``$TOP/models/$model/newton_krylov.cfg``,
where ``$TOP`` is the toplevel directory of the repo and ``$model`` is the name
of the model to which the Newton-Krylov solved is being applied.

Output from the NK solver is written to a work directory.
The location of the work directory is specified by ``workdir`` in the cfg file.

The NK solver is invoked by running an invocation script, which is generated by the script
``src/gen_invoker_script.py``.
While this latter script can be invoked interactively with the command ``python -m
src.gen_invoker_script``, this is usually not necessary, as each model has a setup_model
script that invokes it.
That said, running this command with the argument ``-h`` shows what command line options
are available, such as the path of the cfg file.
The ``gen_invoker_script.py`` script is designed to generate invoker scripts for any
model for the NK solver.
The default model is test_problem.
The path of the invocation script, which defaults to ``nk_driver.sh`` in the work directory,
can be modified by changing ``invoker_script_fname`` in the cfg file.
The setting of the cfg file path to ``./src/gen_invoker_script.py`` is propagated to the
invoker script.

Invoking the invocation script with the ``-h`` option shows what command line options are
available, such ``--resume`` to resume the solver after it exits, or ``--rewind`` to back
up the solver one step when resuming.
The ``--rewind`` option is useful when resuming after a forward model run aborts.
Otherwise, the solver assumes that the forward model run was successful.

The NK solver can either run with the driver persistent in memory, or it can invoke
itself after a forward model run and exit.
The latter approach is necessary when the computing environment does not allow for the
driver task to persist in memory for the amount of time that it takes to perform multiple
forward model runs.
The ``cime_pop`` model is implemented such that the solver exits immediately after
submitting the forward model run to a batch job submission system, reducing the amount of
time that the solver resides in memory.

------------------------
Diagnostic Solver Output
------------------------

As the solver progresses, informational messages are written to a log file.
The path of the log file, which defaults to ``newton_krylov.log`` in the work directory,
can be modified by changing ``logging_fname`` in the cfg file.
Setting ``logging_level=DEBUG`` in the cfg file will generate more output in the log file.

The solver writes summary statistics for each model being run to a netCDF formatted stats
file.
The stats file includes mean and norm of the Newton iterates, their function evaluations,
and the increments applied in Newton's method.
The path of the stats file, which defaults to ``newton_solver_stats.nc`` in the work
directory, can be modified by changing ``newton_solver_stats_fname`` in the cfg file.

--------------
Shadow Tracers
--------------

Some models utilize shadow tracers that are formulated to mostly track their real tracer
counterparts.
For these models, Newton's method is applied to the shadow tracers and ignores the real
tracer counterparts.
The purpose of doing this is to enable the disabling of feedbacks in the tracer evolution
equations from Newton's method, feedbacks that might behave non-linearly on timescales
much shorter than the model forward integration duration.
An example is spinning up biogeochemical tracers in an OGCM, and utilizing shadow nutrient
tracers whose uptake is taken from their real tracer counterparts.
This effectively spin up the shadow nutrients with fixed productivity fields.
The details of the shadowing are confined to the model implementation, and do not propagte
into the NK solver.
At the end of each Newton iteration, shadow tracers are copied to the real counterparts.

----------------------
Fixed Point Iterations
----------------------

At each Newton iteration, the Newton solver produces an increment that satisfies an
Armijo residual improvement criteria.
Adding this to the current iterate produces a provisional next Newton iterate.
Before proceeding to the next Newton iteraton with this provisional iterate, the solver
performs a number of forward model runs, to allow short time scale adjustments in the
model to occur.
These fixed point iterations are performed after copying shadow tracers to their real
tracer counterparts, for those models that have shadow tracers.
The fixed point iterations in this use case enable the shadowed tracers to adjust to the
Newton increment.
The number of these fixed point iterations, which defaults to 1, can be modified by
changing ``post_newton_fp_iter`` in the cfg file.
